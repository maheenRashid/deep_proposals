require 'nn';
require 'cutorch';
require 'cunn';
npy4th = require 'npy4th'

local model_xavier_file='/disk2/aprilExperiments/headC_160/withFlow_gaussian_xavier_fixed.dat';
local model_xavier_combo_file='/disk2/aprilExperiments/headC_160/withFlow_gaussian_xavier_fixed_unitCombo.dat';
local model_pretrained_file='/disk3/maheen_data/headC_160/onlyFlow_human_xavier_fix_full/1e-05_res/final/model_all_final.dat';

-- local model_xavier = torch.load(model_xavier_file);
-- model_xavier:double();
local model_xavier_combo = torch.load(model_xavier_combo_file);
-- model_xavier_combo:double();
local model_pretrained = torch.load(model_pretrained_file);
-- model_pretrained:double();

-- local model_xavier = torch.load(model_xavier_file);
local model_xavier_combo = torch.load(model_xavier_file);
local model_pretrained = torch.load(model_pretrained_file);


-- print ('model_xavier')
-- print (model_xavier)
-- print ('model_xavier_combo')
-- print (model_xavier_combo)
-- print ('model_pretrained')
-- print (model_pretrained)

local combo_stump=model_xavier_combo:clone();
print ('combo_stump_before');
print (combo_stump:get(1):get(1):get(2));
print (combo_stump:get(1):get(1):get(2):get(1).weight:size(),torch.var(combo_stump:get(1):get(1):get(2):get(1).weight),torch.var(combo_stump:get(1):get(1):get(1):get(1).weight))


local para=nn.ParallelTable();
para:add(combo_stump:get(1):get(1):get(1):clone());
para:add(model_pretrained:get(1):get(1):clone());
print ('para');
print (para);

combo_stump:get(1):remove(1);
print ('removed')
print (combo_stump)
combo_stump:get(1):insert(para,1);
    

-- -- combo_stump:get(1):get(1):remove(2);
-- combo_stump:get(1):get(1):add(model_pretrained:get(1):get(1):clone(),2);
print ('combo_stump_after');
print (combo_stump);
print (combo_stump:get(1):get(1):get(2):get(1).weight:size(),torch.var(combo_stump:get(1):get(1):get(2):get(1).weight),torch.var(combo_stump:get(1):get(1):get(1):get(1).weight))


-- print ('model_pretrained');
print (model_pretrained:get(1):get(1))
print (torch.var(model_pretrained:get(1):get(1):get(1).weight))

local out_file='/disk2/aprilExperiments/headC_160/withFlow_gaussian_xavier_fixed_floStumpPretrained.dat'
torch.save(out_file,combo_stump);



	-- -- local para=nn.ParallelTable();
 -- --    para:add(nn.SpatialConvolution(512,512,1,1));
 -- --    para:add(nn.SpatialConvolution(512,512,1,1));
	-- local seq=nn.Sequential();
 --    -- seq:add(para);

	-- -- local seq_trunk = nn.Sequential();
 --    seq:add(nn.JoinTable(2));
 --    seq:add(nn.SpatialConvolution(1024,512,1,1));
 --    -- seq:add(seq_trunk);

 --    print (seq)
 -- --    seq:get(1):get(1).weight=torch.ones(seq:get(1):get(1).weight:size());
 -- --    seq:get(1):get(1).bias=torch.zeros(seq:get(1):get(1).bias:size());

	-- -- seq:get(1):get(2).weight=torch.ones(seq:get(1):get(2).weight:size());
 -- --    seq:get(1):get(2).bias=torch.zeros(seq:get(1):get(2).bias:size());

 --    -- seq:get(3).weight=torch.ones(seq:get(3).weight:size());
 --    -- seq:get(3).bias=torch.zeros(seq:get(3).bias:size());
 --    seq:get(2).weight=torch.ones(seq:get(2).weight:size())/seq:get(2).nInputPlane;
 --    seq:get(2).bias=torch.zeros(seq:get(2).bias:size());

 --    local input_1=torch.ones(torch.LongStorage({1,512,10,10})):mul(4);
 --    local input_2=torch.ones(torch.LongStorage({1,512,10,10})):mul(5);
    
 --    local out=seq:forward{input_1,input_2};
 --    print (out[{{1},{},{1},{1}}])
 --    print (out[{{1},{},{1},{1}}]:size())
 --    -- print (out)
 --    print (out:size())
 --    -- print (input_1:size(),input_2:size());
 --    -- print (input_1[1][1][1]);
 --    -- print (input_2[1][1][1]);

        



    


-- function getTightBbox(segMasks,thresh)
-- 	bbox_tight=torch.Tensor(torch.LongStorage({segMasks:size(1),4}));
-- 	for idx=1,segMasks:size(1) do
-- 		bin_mask=segMasks[idx];
-- 		bin_mask[bin_mask:lt(thresh)] = 0;
-- 		bin_mask[bin_mask:ge(thresh)] = 1;
-- 		index_all=torch.nonzero(bin_mask)
-- 		if index_all:nElement()==0 then
-- 			bbox_tight[idx]=torch.Tensor({-1,-1,-1,-1});
-- 		else
-- 			min_idx=torch.min(index_all,1);
-- 			max_idx=torch.max(index_all,1);
-- 			bbox_tight[idx]=torch.Tensor({min_idx[1][1]-1,min_idx[1][2]-1,max_idx[1][1]-1,max_idx[1][2]-1});
-- 		end
-- 	end
-- 	return bbox_tight
-- end

-- file_name='/disk3/maheen_data/headC_160_noFlow/4/COCO_val2014_000000041837_seg.npy'
-- seg_mask=npy4th.loadnpy(file_name);
-- print (seg_mask:size());

-- thresh=0.2;

-- -- seg_mask_bin=torch.zeros(seg_mask:size());
-- -- seg_mask_bin[seg_mask:ge(thresh)]=1;
-- -- -- seg_mask_bin=seg_mask_bin:binary();
-- -- out_file='/disk2/temp/seg_binary.b';
-- -- torch.save(out_file, seg_mask_bin ,binary)


-- bbox_tight=getTightBbox(seg_mask,thresh);
-- print (bbox_tight:size());

-- npy4th.savenpy('/disk2/temp/bboxTight.npy',bbox_tight);

-- -- seg_mask_curr=seg_mask[1];
-- -- print (seg_mask_curr:size());

-- -- bin_mask=seg_mask_curr:clone();
-- -- -- bin_mask[bin_mask:geq(thresh)]=1;
-- -- -- 

-- -- -- bin_mask[bin_mask:leq(thresh)]=0;
-- -- bin_mask[bin_mask:lt(thresh)] = 0;
-- -- bin_mask[bin_mask:ge(thresh)] = 1;


-- -- print (bin_mask:size());






-- -- local x = os.clock()
-- -- index_all=torch.nonzero(bin_mask)
-- -- -- index_all={}
-- -- -- for r=1,bin_mask:size(1) do
-- -- -- 	for c=1,bin_mask:size(2) do
-- -- -- 		if bin_mask[r][c]>=thresh then
-- -- -- 			index_all[#index_all+1]={r,c};
-- -- -- 		end
-- -- -- 	end
-- -- -- end

-- -- print(string.format("elapsed time: %.2f\n", os.clock() - x))

-- -- print (index_all:size())

-- -- bin_mask_shift=torch.zeros(bin_mask:size());
-- -- bin_mask_small=bin_mask[{{2,bin_mask:size(1)},{2,bin_mask:size(2)}}];
-- -- bin_mask_shift[{{1,bin_mask_small:size(1)},{1,bin_mask_small:size(2)}}]=bin_mask_small;

-- -- print (bin_mask_small:size())
-- -- print (bin_mask_shift:size())

-- -- diff=torch.bin_mask_shiftbin_mask;
-- -- diff=torch.abs(bin_mask_shift:csub(bin_mask))
-- -- index_border=torch.nonzero(diff);
-- -- print (index_border:size());

-- -- out_file_border='/disk2/temp/border.npy'
-- -- npy4th.savenpy(out_file_border,index_border);