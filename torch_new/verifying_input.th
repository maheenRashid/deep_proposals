
require 'nn';
require 'loadcaffe';
require 'cutorch';
require 'cunn';
require 'optim'
require 'hdf5'
require 'image'
require 'gnuplot'
npy4th = require 'npy4th'
require 'data_noFlow';
require 'paths';

local pos_file='/disk2/aprilExperiments/positives_160.txt';
local neg_file='/disk2/marchExperiments/deep_proposals/negatives.txt';

-- self.batch_size_seg=32;
out_dir='/disk2/aprilExperiments/headC_160/checking_data';
paths.mkdir(out_dir);

td=data({file_path_positive=pos_file,file_path_negative=neg_file});
td.batch_size_positive_score=20;
td.batch_size_negative_score=20;

for batch_no=1,5 do
	td:getTrainingDataToyScore();
	imgs=td.training_set_score.data;
	labels=td.training_set_score.label;
	for idx=1,imgs:size(1) do
		img_curr=imgs[idx];

		-- add mean
        for i=1,img_curr:size()[1] do
            img_curr[i]:add(td.params.mean[i])
        end
        img_curr=img_curr:add(math.abs(torch.min(img_curr)));
		img_curr=img_curr:div(torch.max(img_curr));
		

		label_curr=labels[idx][1];
		if label_curr<0 then
			out_file_curr=out_dir..'/'..'neg_'..batch_no..'_'..idx..'.png';
		else
		    out_file_curr=out_dir..'/'..'pos_'..batch_no..'_'..idx..'.png';
		end

		image.save(out_file_curr,img_curr);
	end
end

for batch_no=1,5 do
	td:getTrainingDataToy();
	imgs=td.training_set_seg.data;
	labels=td.training_set_seg.label;

	for idx=1,imgs:size(1) do
		img_curr=imgs[idx];

		-- add mean
        for i=1,img_curr:size()[1] do
            img_curr[i]:add(td.params.mean[i])
        end
        img_curr=img_curr:add(math.abs(torch.min(img_curr)));
		img_curr=img_curr:div(torch.max(img_curr));
		
		label_curr=labels[idx];
		-- label_curr=labels[idx][1];
		-- if label_curr<0 then
		out_file_curr=out_dir..'/'..'im_'..batch_no..'_'..idx..'.png';
		image.save(out_file_curr,img_curr);
		out_file_curr=out_dir..'/'..'mask_'..batch_no..'_'..idx..'.png';
		image.save(out_file_curr,label_curr);
	end
end